# -*- coding: utf-8 -*-
"""portfolio-tracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tqifub--GsKGHwS7p1lpXCvYaIohzwI5
"""

# Import necessary library for plotting graphs
import matplotlib.pyplot as plt

# Initialize the portfolio and related variables
money_end = 1000  # Initial capital (cash available to invest)
transaction_cost = 0.0075  # 0.75% transaction fee for every buy/sell transaction
portfolio = {}  # Dictionary to store multiple assets and their quantities
transaction_log = []  # List to store logs of each transaction

def log_transaction(transaction_type, asset, quantity, price):
    """
    Logs each transaction in a dictionary.
    This will be appended to the transaction_log list for tracking.
    """
    transaction_log.append({
        "type": transaction_type,  # 'buy' or 'sell'
        "asset": asset,  # Name of the asset (e.g., AAPL, BTC)
        "quantity": quantity,  # Quantity of the asset traded
        "price": price,  # Price at which the trade happened
        "portfolio": portfolio.copy(),  # Snapshot of the portfolio at this moment
        "money_end": money_end  # Available cash after the transaction
    })

def buy(asset, quantity, price):
    """
    Function to buy an asset.
    Checks if there is enough cash available for the purchase.
    """
    global money_end  # Use the global money_end variable inside this function

    # Calculate the total amount of money required for this purchase
    allocated_money = quantity * price
    total_cost = allocated_money + transaction_cost * allocated_money  # Includes transaction fee

    # Check if there is enough money to buy the asset
    if money_end >= total_cost:
        # Add the quantity to the portfolio (or create the asset entry if not present)
        portfolio[asset] = portfolio.get(asset, 0) + quantity

        # Deduct the total cost from the available money
        money_end -= total_cost

        # Log the transaction
        log_transaction("buy", asset, quantity, price)

        # Print confirmation of the purchase
        print(f"Bought {quantity} units of {asset} at ${price} each.")
    else:
        # Print error if not enough funds are available
        print("Insufficient funds to complete the transaction.")

def sell(asset, quantity, price):
    """
    Function to sell an asset.
    Ensures that the user owns enough of the asset before selling.
    """
    global money_end  # Use the global money_end variable inside this function

    # Check if the asset exists and there is enough quantity to sell
    if asset in portfolio and portfolio[asset] >= quantity:
        # Calculate the total amount gained from this sale
        allocated_money = quantity * price
        total_gain = allocated_money - transaction_cost * allocated_money  # Includes transaction fee

        # Reduce the quantity of the asset in the portfolio
        portfolio[asset] -= quantity

        # Add the gained amount to the available money
        money_end += total_gain

        # Remove the asset from the portfolio if all units are sold
        if portfolio[asset] == 0:
            del portfolio[asset]

        # Log the transaction
        log_transaction("sell", asset, quantity, price)

        # Print confirmation of the sale
        print(f"Sold {quantity} units of {asset} at ${price} each.")
    else:
        # Print error if there are not enough assets to sell
        print(f"Not enough {asset} to sell.")

def view_portfolio():
    """
    Displays the current portfolio and the available cash.
    """
    print("\nCurrent Portfolio:")  # Print header for portfolio display
    for asset, quantity in portfolio.items():  # Loop through each asset in the portfolio
        print(f"{asset}: {quantity} units")  # Print the asset name and its quantity
    print(f"Available Money: ${money_end:.2f}")  # Print the available cash with 2 decimal points

def plot_portfolio_value():
    """
    Plots the portfolio value over time using the transaction log.
    """
    # Extract the portfolio values from the transaction log
    values = [log["money_end"] for log in transaction_log]
    x = list(range(len(values)))  # Create x-axis based on the number of transactions

    # Create the plot
    plt.figure(figsize=(10, 5))  # Set the figure size
    plt.plot(x, values, marker='o')  # Plot the values with markers
    plt.title("Portfolio Value Over Time")  # Set the title of the plot
    plt.xlabel("Transaction Number")  # Label for the x-axis
    plt.ylabel("Portfolio Value (in $)")  # Label for the y-axis
    plt.grid(True)  # Show grid for better readability
    plt.show()  # Display the plot

def menu():
    """
    Interactive menu for buying and selling assets.
    The user can select options to buy, sell, view portfolio, view logs, or exit.
    """
    while True:  # Loop until the user chooses to exit
        # Print the menu options
        print("\n1. Buy Asset\n2. Sell Asset\n3. View Portfolio\n4. View Transaction Log\n5. Plot Portfolio Value\n6. Exit")
        choice = input("Enter your choice: ")  # Get the user's choice

        if choice == "1":  # If the user chooses to buy
            asset = input("Enter asset name: ").upper()  # Get the asset name and convert to uppercase
            qty = int(input("Enter quantity: "))  # Get the quantity as an integer
            price = float(input("Enter price per unit: "))  # Get the price per unit as a float
            buy(asset, qty, price)  # Call the buy function

        elif choice == "2":  # If the user chooses to sell
            asset = input("Enter asset name: ").upper()  # Get the asset name and convert to uppercase
            qty = int(input("Enter quantity: "))  # Get the quantity as an integer
            price = float(input("Enter price per unit: "))  # Get the price per unit as a float
            sell(asset, qty, price)  # Call the sell function

        elif choice == "3":  # If the user chooses to view the portfolio
            view_portfolio()  # Call the view_portfolio function

        elif choice == "4":  # If the user chooses to view the transaction log
            print("\nTransaction Log:")  # Print header for the log
            for log in transaction_log:  # Loop through each log entry
                print(log)  # Print the log entry

        elif choice == "5":  # If the user chooses to plot portfolio value
            plot_portfolio_value()  # Call the plot_portfolio_value function

        elif choice == "6":  # If the user chooses to exit
            print("Exiting...")  # Print exit message
            break  # Exit the loop

        else:  # If the user enters an invalid choice
            print("Invalid choice. Please try again.")  # Print error message

# Run the menu function to start the simulator
menu()